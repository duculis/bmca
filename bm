#!/usr/bin/env python
import os
from clize import run
from datetime import datetime
import sqlite3
from bs4 import BeautifulSoup
import requests
from tabulate import tabulate
import pandas as pd

db_path = os.path.join(os.getenv('HOME'), '.bm.db')


def a(url, *, desc='', tags=''):
    conn = sqlite3.connect(db_path)
    c = conn.cursor()
    c.execute("CREATE TABLE IF NOT EXISTS urls(id INTEGER primary key, time TIMESTAMP,"
              "url TEXT UNIQUE, title TEXT, description TEXT, tags TEXT, views INT)")
    time = datetime.now()
    title = _get_title(url)
    title = title.replace("'",  "")
    print('Adding url : {}, title : {}...'.format(url, title))
    q = "INSERT INTO urls VALUES(NULL, '{time}', '{url}', '{title}', '{desc}', '{tags}', {views})".format(time=time, url=url, title=title, desc=desc, tags=tags, views=0)
    try:
        c.execute(q)
        conn.commit()
    except sqlite3.IntegrityError:
        print('Failed, url "{}" Already exists in the database.'.format(url))


def _get_title(url):
    soup = BeautifulSoup(requests.get(url).content, 'lxml')
    if soup.title is None:
        return ''
    return soup.title.text


def _search_request(keywords):
    w = ' OR '.join(["title LIKE '%{q}%' OR url LIKE '%{q}%'".format(q=k) for k in keywords])
    return w


def ls(q='', *, id=-1, tag=''):
    conn = sqlite3.connect(db_path)
    keywords = q.split(' ')
    w = _search_request(keywords)
    if tag != '':
        w = "({}) AND '{}' LIKE tags".format(w, tag) 
    if q != '':
        # update nb of views only when we search for something
        q = "UPDATE urls SET views = views + 1 WHERE {w}".format(w=w)
        c = conn.cursor()
        c.execute(q)
        conn.commit()
    if id >= 0:
        q = "SELECT id, url, title, views FROM urls WHERE id={}".format(id)
    else:
        q = "SELECT id, url, title, views FROM urls WHERE {w} ORDER BY views DESC".format(w=w)
    c = conn.cursor()
    rows = []
    for row in (c.execute(q)):
        id_, url, title, views = row
        if id < 0:
            url = _format(url)
            title = _format(title)
        rows.append((id_, url, title, views))
    print(tabulate(rows, headers=['id', 'url', 'title', 'views']))


def _format(s):
    max_length = 50
    s = s.replace('\n', '')
    if len(s) > max_length:
        s = s[0:max_length] + '(...)'
    return s


def rm(k='', *, id=-1):
    if id < 0:
        q = "SELECT * FROM urls WHERE title LIKE '%{}%' OR url LIKE '%{}%'".format(k, k)
    else:
        q = "SELECT * FROM urls WHERE id={}".format(id)
    conn = sqlite3.connect(db_path)
    c = conn.cursor()
    for row in c.execute(q):
        id_, url, *rest = row
        response = ''
        while response not in ('y', 'n'):
            print('Delete {} ? (y/n)'.format(url), end='')
            response = input()
            c.execute("DELETE FROM urls WHERE id={}".format(id_))
    conn.commit()


def export(out):
    q = "SELECT * FROM urls"
    conn = sqlite3.connect(db_path)
    c = conn.cursor()
    rows = []
    for row in c.execute(q):
        rows.append(row)
    cols = ['id_', 'time', 'url', 'title', 'desc', 'tags', 'views']
    df = pd.DataFrame(rows, index=False, columns=cols)
    df.to_csv(out)

def tag(q=''):
    keywords = q.split(' ')
    w = _search_request(keywords)
    q = "SELECT id, url, title FROM urls WHERE tags=''"
    conn = sqlite3.connect(db_path)
    c = conn.cursor()
    for id_, url, title in c.execute(q):
        print(url)
        print(title)
        print('New tag ?', end='')
        tag = input()
        if tag != '':
            conn.execute("UPDATE urls SET tags='{}' WHERE id={}".format(tag, id_))
            conn.commit() 


def reset_views():
    conn = sqlite3.connect(db_path)
    q = "UPDATE urls SET views = 0"
    c = conn.cursor()
    c.execute(q)
    conn.commit()


def _show(row):
    id_, time, url, title, desc, tags, views = row
    print('url : "{}", title : "{}", views : {}'.format(url, title, views))


if __name__ == '__main__':
    run([a, ls, rm, export, tag, reset_views])
